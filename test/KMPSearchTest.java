import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * This class tests the Knuth Morris Pratt Algorithm designed.
 */
class KMPSearchTest {

    /**
     * THese are the patterns to look for in the DNA Sequences.
     */
    private final String PATTERN_ONE = "AACA";
    private final String PATTERN_TWO = "AGT";
    private final String PATTERN_THREE = "GTG";
    private final String PATTERN_FOUR = "ACTACTACT";
    private final String PATTERN_FIVE = "";

    /**
     * These are the LSP matrixes generated by the patterns.
     */
    private final int[] PATTERN_ONE_LSP = {0,1,0,1};
    private final int[] PATTERN_TWO_LSP = {0,0,0};
    private final int[] PATTERN_THREE_LSP = {0,0,1};
    private final int[] PATTERN_FOUR_LSP = {0,0,0,1,2,3,4,5,6};

    /**
     * These are the content strings that are checked by the pattern and lsp.
     */
    private final String CONTENT_ONE = "AACCACCAACAA";
    private final String CONTENT_TWO = "AGGTGCAGTAGTAGGT";
    private final String CONTENT_THREE = "GTGTGTGTGACCGTGTTT";
    private final String CONTENT_FOUR = "ACTACTACGACTACTACT";

    private KMPSearch kmpSearch;

    /**
     * This method sets up the KMPSearch.
     */
    @BeforeEach
    void setup(){
        kmpSearch = new KMPSearch();
    }

    /**
     * This does the preprocessing of the given pattern, and confirms the correct frequency array is returned.
     * @param pattern String pattern to be analyzed.
     * @param expectedLSP expected frequency array.
     * @throws IllegalArgumentException an empty string is entered for the pattern.
     */
    void testPreProcess(String pattern, int[] expectedLSP) throws IllegalArgumentException {
        kmpSearch.preprocess(pattern);
        int[] lsp = kmpSearch.getLsp();
        for(int i = 0; i < expectedLSP.length; i++) {
            assertEquals(lsp[i], expectedLSP[i]);
        }
    }

    /**
     * Runs all preprocessing tests.
     */
    @org.junit.jupiter.api.Test
    void preprocess() {
        testPreProcess(PATTERN_ONE, PATTERN_ONE_LSP);
        testPreProcess(PATTERN_TWO, PATTERN_TWO_LSP);
        testPreProcess(PATTERN_THREE, PATTERN_THREE_LSP);
        testPreProcess(PATTERN_FOUR, PATTERN_FOUR_LSP);
        Assertions.assertThrows(IllegalArgumentException.class, ()->{
            kmpSearch.preprocess(PATTERN_FIVE);
        });
    }

    /**
     * This method tests the search methods. Starts by preprocessing each frequency array, and searching and comparing
     * the counts returned.
     */
    @org.junit.jupiter.api.Test
    void search() {
        testPreProcess(PATTERN_ONE, PATTERN_ONE_LSP);
        assertEquals(1,kmpSearch.search(CONTENT_ONE, PATTERN_ONE));

        testPreProcess(PATTERN_TWO, PATTERN_TWO_LSP);
        assertEquals(2,kmpSearch.search(CONTENT_TWO, PATTERN_TWO));

        testPreProcess(PATTERN_THREE, PATTERN_THREE_LSP);
        assertEquals(5,kmpSearch.search(CONTENT_THREE, PATTERN_THREE));

        testPreProcess(PATTERN_FOUR, PATTERN_FOUR_LSP);
        assertEquals(1, kmpSearch.search(CONTENT_FOUR, PATTERN_FOUR));
    }
}